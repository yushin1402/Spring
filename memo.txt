・URL
http://terasolunaorg.github.io/guideline/5.5.1.RELEASE/ja/Tutorial/TutorialTodo.html#id4


①プロジェクトの作成
mvn archetype:generateを利用して実装するインフラストラクチャ層向けのブランクプロジェクトを作成うる。
※インフラストラクチャ層のアーキタイプ:
	- java.util.Mapを利用したインメモリ実装のRepositoryImple
	- MyBatis3を使用してデータベースアクセスするRepositoryImple
	- Spring Data JPAを使用してデータベースにアクセスするRepositoryImple

一旦、java.util.Mapを利用したブランクプロジェクトを作成する。

【MVNコマンド】
mvn archetype:generate -B\
 -DarchetypeGroupId=org.terasoluna.gfw.blank\
 -DarchetypeArtifactId=terasoluna-gfw-web-blank-archetype\
 -DarchetypeVersion=5.5.1.RELEASE\
 -DgroupId=com.example.todo\
 -DartifactId=todo\
 -Dversion=1.0.0-SNAPSHOT

ここでは、C:\study\spring\terasolunaチュートリアル上でGit Bashを立ち上げ、上記コマンドを実行した。

②プロジェクトのインポート: 
	- 作成したブランクプロジェクトをSTSへインポートする。
	  [File] -> [インポート] -> [Maven] -> [既存Mavenプロジェクト] -> [次へ]
	- ルートディレクトリに作成したブランクプロジェクトを設定し完了する。
	  C:\study\spring\terasolunaチュートリアル\todo
	- パッケージエクスプローラーにtodoプロジェクトがインポートされたことを確認する。

③プロジェクトの動作確認:
	トップページを表示:
		Controller:
			package com.example.todo.app.welcome;

				import java.text.DateFormat;
				import java.util.Date;
				import java.util.Locale;

				import org.slf4j.Logger;
				import org.slf4j.LoggerFactory;
				import org.springframework.stereotype.Controller;
				import org.springframework.ui.Model;
				import org.springframework.web.bind.annotation.RequestMapping;
				import org.springframework.web.bind.annotation.RequestMethod;

				/**
				 * Handles requests for the application home page.
				 */
				/* SpringBoot起動時にDIコンテナにインスタンスが登録される。＠Autowireの呼び出し元クラスにインスタンスを代入出来る */
				@Controller
				public class HelloController {
				/* praivate finalとしているのはこのクラスからしかこの変数にアクセスを許さないから。staticをつけるとクラスに対して1つしか変数を持たない。(複数インスタンスを作成する場合、変数の値を共有する。) 
				   このクラスはクライアントアクセスを受け付ける、コントロールするものであるため、アクセスを受け付けるために新しいインスタンスが作成される。この際、LoggreFactoryを共有することで
				   メモリの節約になる？(そもそもこうしないとログが統一されない？)*/
				/*LoggerFactory.getLogger(HelloController.class)でHelloController.classがロガー名のロガーを取得している。ロガーは文字どおり、ログを出力するコンポーネント。別にあるLogBackの設定ファイルはロガーごとに
				  定義可能で、コンソール出力か、ファイルパス出力か、メッセージ形式をどうするかなどを設定出来る。*/
				    private static final Logger logger = LoggerFactory
				            .getLogger(HelloController.class);

				    /**
				     * Simply selects the home view to render by returning its name.
				     */
     				/*@RequestMappingはSpringbootのアノテーションで、これが定義されたメソッドで、リクエストを処理する。この例では、ドキュメントルート(/)へのGETとPOSTをhomeメソッドで処理する記述となっている。*/
				    @RequestMapping(value = "/", method = {RequestMethod.GET, RequestMethod.POST})
				    public String home(Locale locale, Model model) {
     				/*HelloController.classロガーの設定に従ってinfroログ出力*/
				        logger.info("Welcome home! The client locale is {}.", locale);
     				/*現在時刻を持つインスタンスを生成*/
				        Date date = new Date();
       				/*Dateformatはクラスなので、Dateformat型変数を作って、getDateTimeInstanceで取得したDateformat型インスタンスを代入している。DateFormat.LONGはインスタンスではなく値。
       				  public static final DateFormat getDateTimeInstance(int dStyle, int tStyle [,Locale loc]) dstyle:日付スタイル tstyle:時刻スタイル* 最後はロケール*/
				        DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG,
				                DateFormat.LONG, locale);
					/*getDateTimeInstanceインスタンスに現在時刻を渡してフォーマットして変数に格納*/
				        String formattedDate = dateFormat.format(date);
					/*modelはspringMVCのモデル実装。servertime属性にgetDateTimeInstanceフォーマットのタイムスタンプを格納しておくと、view側のhtml、jspなど(今回はWEB-INF/views/welcome/home.jsp、ViewResolverで設定されているらしい)からservertimeを介して呼び出すことが出来る。*/
				        model.addAttribute("serverTime", formattedDate);
					/*home.htmlを返却する。*/
				        return "welcome/home";
				    }

				}

	アプリケーション実行:
		- チュートリアルのSTSとのバージョン差異でチュートリアル通りには出来ない？
		  Tomcatを追加して、動かす設定をしてみる。(DockerとかKubernetesとも連携できるらしいから今度調べる)
		- ウィンドウ→設定→サーバー→ランタイム環境→追加→Apache Tomcat v10.0(新規ローカルサーバの作成にチェック)→次へ→
		  インストールディレクトリをCドライブ直下に指定→ダウンロードしてインストール→同意して完了→完了→適用して閉じる
		- C:\apache-tomcat-10.0.10にtomcat10がインストールされたことを確認する。
		- プロジェクトで右クリック→実行→実行構成→ApacheTomcat→名前をtudo-tutoにして適用→実行
		- エラー発生。「メイン・クラスorg.apache.catalina.startup.Bootstrapを検出およびロードできませんでした」とのこと。
		- Eclipse Tomcat Pluginが必要らしい。ヘルプ→Eclipseマーケットプレイス→Eclipse Java EE 開発者ツールで検索→Eclipse Enterprise Java and Web Developer tools 3.23をインストール
		  →全部チェックつけて確認→同意しますで完了→右したのソフトウェアのインストール中が100%になるまで待ち→今すぐ再起動
		- 実行をリトライ→tomcatは起動出来たけど404エラー。warをビルドしてからtomcatを再起動することにするも、mavenのビルドエラー
		- Failed to execute goal org.apache.maven.plugins:maven-war-plugin:3.0.0:war (default-war) on project helloworld: Execution default-war of goal org.apache.maven.plugins:maven-war-plugin:3.0.0:war failed: Unable to load the mojo 'war' in the plugin 'org.apache.maven.plugins:maven-war-plugin:3.0.0' due to an API incompatibility: org.codehaus.plexus.component.repository.exception.ComponentLookupException
		- warのビルドプラグインがjavaやmavenに対して古すぎるっぽい。pom.xmlを修正
		- 3.3.2にしてみる
		  https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-war-plugin
		- 実行からMaven Clead → Maven ビルドでビルドは今後は成功
		- エラー解消されない。。。アプリケーションが起動出来ない
		- java.lang.NoClassDefFoundError: javax/servlet/ServletContextListener 
		- pom.xml上はtomcat9が設定されていたので、tomcat9をインストール(追加)してリトライ
		- 成功！tomcatとpom.xmlの非互換が原因だったよう。実行構成でtodoアプリは常にtomcat9で起動するように設定
		- なんかログがいっぱい出た
		    date:2021-10-25 00:39:06	thread:main	X-Track:	level:INFO 	logger:o.springframework.web.servlet.DispatcherServlet 	message:Initializing Servlet 'appServlet'
			date:2021-10-25 00:39:08	thread:main	X-Track:	level:INFO 	logger:o.springframework.web.servlet.DispatcherServlet 	message:Completed initialization in 2526 ms
			10月 25, 2021 12:39:08 午前 org.apache.coyote.AbstractProtocol start
			情報: プロトコルハンドラー ["http-nio-8080"] を開始しました。
			10月 25, 2021 12:39:08 午前 org.apache.catalina.startup.Catalina start
			情報: サーバーの起動 [10754]ms
		    date:2021-10-25 00:39:09	thread:http-nio-8080-exec-2	X-Track:8989b4f114a4476c9d6bec879f6d2f98	level:TRACE	logger:o.t.gfw.web.logging.TraceLoggingInterceptor     	message:[START CONTROLLER] HelloController.home(Locale,Model)
		    date:2021-10-25 00:39:09	thread:http-nio-8080-exec-2	X-Track:8989b4f114a4476c9d6bec879f6d2f98	level:INFO 	logger:com.example.todo.app.welcome.HelloController    	message:Welcome home! The client locale is ja_JP.
			#コメント 上記がHelloContorller.javaのLogger.infoで出力したログ。端末のロケール情報がhomeメソッドの第一引数に設定された。なんで？
			 → Spring MVCの仕組みらしい。コントローラ内のメソッドはコントローラメソッドと呼ばれて、このメソッドの引数に特定のクラスを指定すると画面入力されたもの以外の様々な情報をHTTPリクエストから拾ってくれるらしい。
			    Spirng内の処理(org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverとorg.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolver)で下記の引数にリクエスト情報から生成したオブジェクトをバインドしているとのこと。
			    	org.springframework.web.context.request.WebRequest
					org.springframework.http.HttpMethod
					javax.servlet.ServletRequest
					javax.servlet.ServletResponse
					org.springframework.web.multipart.MultipartRequest
					javax.servlet.http.HttpSession
					java.security.Principal
					java.util.Locale
					java.util.TimeZone
					java.time.ZoneId
					java.io.InputStream
					java.io.OutputStream
					java.io.Reader
					java.io.Writer
		    date:2021-10-25 00:39:09	thread:http-nio-8080-exec-2	X-Track:8989b4f114a4476c9d6bec879f6d2f98	level:TRACE	logger:o.t.gfw.web.logging.TraceLoggingInterceptor     	message:[END CONTROLLER  ] HelloController.home(Locale,Model)-> view=welcome/home, model={serverTime=2021年10月25日 0:39:09 JST}
		    date:2021-10-25 00:39:09	thread:http-nio-8080-exec-2	X-Track:8989b4f114a4476c9d6bec879f6d2f98	level:TRACE	logger:o.t.gfw.web.logging.TraceLoggingInterceptor     	message:[HANDLING TIME   ] HelloController.home(Locale,Model)-> 106,205,100 ns

④Todoアプリケーションの作成:
	Domain層の作成:
		Domain Objectの作成:
			ドメイン層とは: ビジネスロジックを動作させる層。ドメインとはビジネスロジックの分割単位のこと。
							modelとrepositoryとserviceに分かれる
			mode:
				インターフェースする変数をまとめたオブジェクト。プライベートメンバーとそのメンバーに対するアクセスを行うメソッドを用意しておく。
			repository:
				データベースアクセスを実現するためのメソッドを用意しておく。MyBatisを利用する場合はオブジェクトとDBリポジトリのマッピングを定義しておくし、H2などのインメモリ型DB
				を使っている場合は単にCRUD操作を行うメソッドを用意しておけばOK。インターフェース型で定義しておいて、service側でインプリメントする(はず)
				チュートリアルではtodo型のオブジェクト(modelで定義したクラスから生成)を引数にして対象todoを作ったり削除したり検索したりするメソッドを定義している。
			RepositoryImple:
				- repositoryで作成したインターフェースをインプリメントして実際のCRUD操作を実装する。
				  チュートリアルでは、ConcurrentHashMapインスタンス(StirngとTodoオブジェクトを紐づけたマップ)を作成し、このインスタンスに対してデータを突っ込んだり、削除したりする操作を記述してる。
				- Optional<Todo>は、nulllかもしれない値を取り扱うのに便利なオブジェクトらしい。これを使うことで自前でnullかどうかのチェックを実装しないですむ。
				  チュートリアルではTODO_MAP.get(TodoId)をOptionalオブジェクトに格納してリターンしている。findByIdで存在しないIDを検索された場合も例外を投げずにnullを取り扱うため(のはず)
				- Collection<Todo>はデータを表現するためにJavaが用意している便利なクラスらしい。Collectionはインターフェースなので、単独でインスタンスを生成することはできず
				  例えば、下記のデータ構造を取り扱うメソッドをCollection型として実装する形で利用する。
				  java.util.List	順序付きリストのインターフェース
				  java.util.ArrayList	配列を用いたjava.util.Listの実装
				  java.util.LinkedList	リンクリストを用いたjava.util.Listの実装
				  java.util.Set	重複を許さない集合のインターフェース
				  java.util.HashSet	ハッシュを用いたjava.util.Setの実装
				  java.util.TreeSet	二分探索木を用いたjava.util.Setの実装
				  上記のどれを実装したとしても、実装したデータ構造に対して、Collectionのadd、remove、contains、size、isEmptyなどのメソッドを適用出来るところが便利ポイント
				  確かにこれは修正に強いプログラムになる気がする(そもそものインターフェース型の強味？)
				  チュートリアルでは、TODO_MAP.values()の結果をCollectionオブジェクトに格納してリターンしているので、これで、ConcurrentHashMapに格納された全値のリストに上記のメソッドでアクセス出来る。
				  なお、この値の一覧は当たり前だがメソッドの仕様でCollection型で返されるので、単純にリターン出来ているっぽい。
			service:
				- 業務ロジックを記述するインターフェースを作成する。チュートリアルでは、todoの作成、削除、全件表示、完了の4つを定義。この後これらの具体的な処理を実装する。
			ServiceImple
				- serviceで定義したインターフェースを利用して具体的なメソッドを実装する。todoの作成、削除、全件表示、完了の4つを実装しているが、各メソッドの基本的な流れは同じで
				  todoオブジェクトを作成→todoオブジェクトに変数を設定→todoオブジェクトをtodoRepositoryに渡して、DBに保存⇒todoをリターン
				  なお、todoRepositoryはDIコンテナからインスタンス取得している。@Injectの動きとなるが、@Autowiredとの違いが不明
				  エラーメッセージを生成する処理でResultMessageをインスタンス化なしで呼び出しているが、これはstaticメソッドの動きで共有メモリから直接メソッド呼び出し出来るらしい。
				  UUIDの処理がまさに該当する認識だが、仮にStaticメソッドで変数を格納した場合は、共有領域に保存されるため、他インスタンスからのアクセスが可能。逆にインスタンス化して呼び出すとUUIDは一意なIDを生成出来ない可能性がある？
				  DateをStaticとして呼び出していないのは、インスタンス化しておかないと、呼び出す度にタイムスタンプが変わるから？Date()をそのまま引数には出来ない？
				  @Transactionalをつけることでこのクラスで定義したpublicメソッドは全てトランザクション管理の対象となり、メソッド開始時にトランザクションを開始し、メソッド完了時にコミット、例外発生時はロールバックするようになるらしい(すごい)
				  @Transactional(readOnly=true)とすると、O/RMapperを利用している場合のみ、参照のみのトランザクション制御の最適化をしてくれるらしい
	アプリケーション層の作成:
		contorollerの作成:
			- コントローラでクライアントのhttpリクエストを受付、後続のドメイン層に処理を受け渡す
			- @Controllerでコンポーネントスキャン対象にし、DIコンテナに格納される。これにより、Spring起動時にコントローラがリクエストの受け口となるように、
			  springがビルドしてくれる。Springを使わない場合はサーブレットの実装が必要？
		formの作成:
			- 画面側で入力したformの値を受け取り、todoに格納する役割。もっと具体的に書くと、Controllerがjspから受け取ったformの入力値をもとserviceを呼び出し
			  取得したデータをformに格納し、さらにformをmodelに追加する。Controllerはmodelをjspに返却し、jspはmodelの内容をもとに画面表示を行う。
		TodoCotrollerへの一覧画面取得処理の実装:
			 Controllerの実装:
				- 一覧画面取得処理は、ドメイン層のtodoServiceのfindAllで実装済み。todoServiceはDIコンテナに登録済みのため、@InjectでSpring起動時に生成したtodoServiceのインスタンスを
				  TodoControllerに代入する。
				- @ModelAttributeでformクラスを初期化して、リターンする。チュートリアルでは、TodoForm型のsetUpFormメソッドに@ModelAttributeが付与されていて、
				  formオブジェクトにTodoFormインスタンスを格納し、formオブジェクトをリターンしている。(この時点でformオブジェクトには画面からのformの入力値が格納されている認識)
				  これにより、Springの処理でformオブジェクトが、modelオブジェクトに追加された状態となり、リクエストのセッション内で他のメソッドやjspから参照出来る形となる。
				  なお、Springの仕様で、modelにformオブジェクトが追加される際は、型名の先頭を小文字にしたものがキー名(今回は{todoForm:[todoオブジェクトの中身}のイメージ]で
				  modelオブジェクトに追加される。
				  TodoFormはimportしていないが、型エラーにならないことから、@ModelAttributeにおいては任意の型名が指定可能(キー名を定義するためのもの？)と推測
				- @GetMapping("list")でtodo/listへのリクエストを受け付けた際に、listメソッドを実行するよう定義している。listメソッドの引数である
				  modelオブジェクトには、@ModelAttributeでformの値を追加したものとなる。今回は全件検索のため、modelオブジェクトの内容は利用していないが、画面の入力値をもとにデータの
				  更新、削除、作成を行う際はmodelオブジェクトから画面の入力値を取得することができる。
				  全件検索の結果はmodelに追加する。これにより、jspからmodelの参照出来るため、jsp側で全件表示のhtmlをレンダリングすることが出来る
				  なお、listメソッドの戻り値が"todo/list"となっているのは、spring-mvc.xmlに定義したViewResolverによって、WEB-INF/views/todo/list.jspをレンダリングするため。
				  list.jspはこの後実装する。modelの値を画面表示するように実装する想定。
			viewの作成:
				- TodoContllerの@GetMappingで定義したlistメソッドの戻り値でレンダリングするようにしたlist.jspを作成する。
				- <c:forEach items="${todos}" var="todo">で、model内のtodosオブジェクトの内容をループして表示させる。
				  todosはfindAll()の実行結果が格納されたオブジェクトなので、Repositoryに登録されたtodo一覧をjspで順次レンダリングする処理となっている。
		TodoCotrollerへのTodo新規作成処理の実装:
			controllerの実装:
				- Mapperを使うとformオブジェクトのプロパティをTodoクラスにコピー出来て便利(何が便利かは分からず。。。。)
				- Postメソッドで/todo/createにアクセスを受けた際にcreateメソッドを実行するように@PostMappingを設定
				- @Validは入力チェックとなる。todoFormのプロパティに不正値が含まれていないか確認。入力チェックの結果はBindingResultで受け取る
				- beanMapper.map(todoForm, Todo.class)でtodoForm(画面の入力値を格納したオブジェクト)をTodoクラスに変換(プロパティの値をTodoクラスにコピー)して、todoに格納。
				  以後、TodoServiceとのインターフェースはtodoを利用する。
				- todoServiceメソッドにtodoオブジェクトをわたし、プロパティの値をもとにデータを作成する
				- addFlashAttributeはFlashスコープで利用できるmodelに値を格納するメソッド。Flashスコープで利用出来るmodelに値を格納すると、
				  リダイレクト先でも値を参照出来る。
			formの実装:
				- @Validでcontrollerの引数に指定したformクラスの入力チェックの具体的な処理内容を実装する。
				  プロパティの前にアノテーションをつけて入力チェックを実装
		    viewの作成:
		    	- Post処理を行うformを実装
		    	- formの属性にmodelAttribute="todoForm"を設定。これはController側でmodelに追加したオブジェクト名と合わせることで、フロントエンド側とサーバサイド側のインターフェースとすることが出来る
			動作確認:
				localhost:8080/todo/todo/listにアクセスし、form入力してtodo createを押したところ、以下のエラーが発生:
					date:2021-11-07 17:06:12	thread:http-nio-8080-exec-9	X-Track:6b9b02369d674b70b758b01fa57628da	level:TRACE	logger:o.t.gfw.web.logging.TraceLoggingInterceptor     	message:[START CONTROLLER] TodoController.create(TodoForm,BindingResult,Model,RedirectAttributes)
					date:2021-11-07 17:06:12	thread:http-nio-8080-exec-9	X-Track:6b9b02369d674b70b758b01fa57628da	level:TRACE	logger:o.t.gfw.web.logging.TraceLoggingInterceptor     	message:[END CONTROLLER  ] TodoController.create(TodoForm,BindingResult,Model,RedirectAttributes)-> view=todo/list, model={todoForm=com.example.todo.app.todo.TodoForm@2005bde1, org.springframework.validation.BindingResult.todoForm=org.springframework.validation.BeanPropertyBindingResult: 1 errors
					Field error in object 'todoForm' on field 'todoTitle': rejected value [null]; codes [NotNull.todoForm.todoTitle,NotNull.todoTitle,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [todoForm.todoTitle,todoTitle]; arguments []; default message [todoTitle]]; default message [must not be null], todo=[]}
					date:2021-11-07 17:06:12	thread:http-nio-8080-exec-9	X-Track:6b9b02369d674b70b758b01fa57628da	level:TRACE	logger:o.t.gfw.web.logging.TraceLoggingInterceptor     	message:[HANDLING TIME   ] TodoController.create(TodoForm,BindingResult,Model,RedirectAttributes)-> 7,863,400 ns
				エラー原因:todoFormにフォームから入力した値が格納されていない？NotNull制約違反でエラーとなっている。	
				todoFormに格納されるまでの動きをトレース:
				
					ブラウザから送信されたFormData: 
						todoTitle: test
						_csrf: 00014673-338f-4cc9-a54a-8c3a5a743d82
					controllerのcreateメソッド引数のtodoForm:
						com.example.todo.app.todo.TodoForm@74a85f4d[todoTitle=<null>]
						
						※pom.xmlに以下を追加したうえで、createメソッド内にSystem.out.println(ToStringBuilder.reflectionToString(todoForm, ToStringStyle.MULTI_LINE_STYLE))を追加してオブジェクトの中身をコンソールに出力した。
						<dependency>
    						<groupId>org.apache.commons</groupId>
    						<artifactId>commons-lang3</artifactId>
							 <version>3.9</version>
						</dependency>
				
				エラー原因2: ブラウザから送信された時点ではtodoTitleに確かに「test」が設定されているが、controllerには届いていない。
				createのtodoFormに値が設定されるまでの動きを確認
						@ModelAttributeのformの内容を確認:
							com.example.todo.app.todo.TodoForm@573fbf42[ todoTitle=<null>]
							formにも入っていない、、、、
				TodoFormのSetterを確認:
					Setterメソッド名が「setTodoTittle」になっていた。(正しくはsetTodoTitle)。Spring内部でjspに定義したmodelAttributeの属性値とTodoFormの変数名、メソッド名で紐づけてオブジェクトの受け渡しをしているため、
					変数名誤りにより、ブラウザから送信されたFormDataがTodoFormにうまく格納出来ていなかった。。。。
				
				別エラー。Create後に一覧を取得出来ない。。。:
					エラー原因1
						repositoryImpleのcreateメソッドにtodoTitleをtodo引数として以下の通り渡せている。

						Repo_create_todocom.example.todo.domain.model.Todo@73d653d1[
 						todoId=51369244-83e3-493d-a1b0-29af482da8fb
						todoTitle=test
						finished=false
						createdAt=Sun Nov 07 19:19:11 JST 2021
						]
						
						TODO_MAPにも値は入っている
						Repo_todo_map_valuesjava.util.concurrent.ConcurrentHashMap$ValuesView@5d87db45[
  						map={51369244-83e3-493d-a1b0-29af482da8fb=com.example.todo.domain.model.Todo@73d653d1}
						]
						※以下コードでTODO_MAPの値を取得
						Collection<Todo> values = TODO_MAP.values();
						System.out.println("Repo_todo_map_values" + ToStringBuilder.reflectionToString(values, ToStringStyle.MULTI_LINE_STYLE));
						TODO_MAPはtodoIdとtodoオブジェクトを紐づけてた
						
						上記からfindAllの不具合を検討。
						
						controllerのlistメソッド内のtodosにもちゃんと値が届いていることを確認
						findAll_todosjava.util.concurrent.ConcurrentHashMap$ValuesView@543f0931[
						map={346178ad-292b-4437-bd26-c74203f35618=com.example.todo.domain.model.Todo@2b0f7c59}
						
						controllerのlistメソッド内のmodelの値が変
						※以下コードでmodelオブジェクトの中身を取得
						model.asMap().entrySet().stream().forEach(s -> System.out.println("findAll_model" + s))
						
						findAll_modelresultMessages=ResultMessages [type=success, list=[ResultMessage [code=null, args=[], text=Created successfully!]]]
						findAll_modeltodoForm=com.example.todo.app.todo.TodoForm@da7f06c
						findAll_modeltodo=[com.example.todo.domain.model.Todo@5674a97c]
						               ↑↑todoではなく、todosにしないとlist.jspが読み取れない
					
						問題のコード:
							model.addAttribute("todo",todos)
						
						上記は"todo"をキーにしてtodosオブジェクトをmodelAttributeに追加している。
						一方で、list.jspでは、items="${todos}"でmodelAttribute内の値を定義しているため、list.jspが値をうまく取得出来ていない。
						model.addAttribute("todos",todos)に修正する。⇒治った
		完了処理の実装:
			入力チェックの実装(Form):
				- todoFinishとtodoCreateでForm名を共有するが、入力チェックはそれぞれで実装する。
				- todoFinishとtodoCreateのインターフェースを作成し、@NotNullなどのgroupに実装することで、todoFinishとtodoCreateそれぞれの入力チェックを定義する。
			controllerの実装
				- グループ化したバリデータを実装するために、@validatedを利用し、createとfinishのtodoForm引数にFormで定義したそれぞれの入力チェック名をバインドする。
				- クライアントからtodo/finishでリクエスト(post)を受け付けた際に実行するfinishメソッドを実装する。
				- finishメソッドの作りの基本はcreateと変わらない。呼び出すドメイン層のサービスをtodoService.finishとするだけ。
			viewの実装:
				- list.jspにfinishを処理するボタンを追加する。
				- finishボタンを押下した際にpostメソッドで/todo/finishにアクセスするようにする。この際、modelAttributeにtodoFormを指定し、
			  	hidden項目の値として設定したtodoIdがtodoFormとして送信されるようにする。

			動作確認:
				ブラウザからのformData(finishボタン押下時:
					todoId: 29a3e4b9-2115-4cd7-8bb2-519b3a01d4e0
_					csrf: e0ef1d56-601c-4e1e-8671-631eecbe6e01
					正常: hidden項目のtodoId(pathがtodoId、valueがtodoIdの値)が送信されたことが分かる。
				finishメソッドがform引数で受け取った値:
					finish_form com.example.todo.app.todo.TodoForm@7e891fb1[
 					todoId=29a3e4b9-2115-4cd7-8bb2-519b3a01d4e0
					todoTitle=<null>]
					正常: todoIdを想定通り受け取れている一方で、todoTitleがなぜかnullで登録されている。これはFormクラスでtodoIdとtodoTitleを定義しているから。
					      (finish処理を実装する前まではtodoTitleしかFormに記述していなかったからnullの項目は出てこなかった)
		削除処理の実装:
			入力チェックの実装(Form):
				- todoIdをもとに削除処理を実装するため、FormのtudoIdプロパティに対してTodoFinishインターフェースを実装したクラスをグループに追加する。
			Controllerの実装:
				- 完了処理とほぼ同じ。呼び出すドメイン層のサービスをtodoService.delete()にするだけ。
			viewの実装:
				- 完了処理とまったく同じ書き方。
			動作確認:
				エラー発生:
					Stacktrace:
					org.apache.jasper.JasperException: [/WEB-INF/views/todo/list.jsp] の処理中に行番号 [76] で例外が発生しました。

					73:                         method="post" modelAttribute="todoForm"
					74:                         cssClass="inline">
					75:                         <!-- (2) -->
					76:                         <form:hidden path="todoId"
					77:                             value="${f:h(todo.todoId)}" />
					78:                         <form:button>Delete</form:button>
					79:                     </form:form>


					Stacktrace:
						at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:611)
						at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:490)
						at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:378)
						at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:326)
						at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
						at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
						at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
						at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
						at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
						at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
						at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:710)
						at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:457)
						at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
						at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
						at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.forward(HeaderWriterFilter.java:143)
						at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:170)
						at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:316)
						at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
						at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
						at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
						at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
						at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
						at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
						at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
						at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
						at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
						at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
						at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
						at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
						at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
						at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
						at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
						at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.terasoluna.gfw.web.logging.mdc.AbstractMDCPutFilter.doFilterInternal(AbstractMDCPutFilter.java:116)
						at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52)
						at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:206)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:100)
						at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
						at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
						at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
						at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
						at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
						at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
						at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
						at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
						at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
						at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
						at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
						at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
						at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
						at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
						at org.terasoluna.gfw.web.logging.mdc.AbstractMDCPutFilter.doFilterInternal(AbstractMDCPutFilter.java:116)
						at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
						at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
						at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
						at org.terasoluna.gfw.web.exception.ExceptionLoggingFilter.doFilter(ExceptionLoggingFilter.java:100)
						at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
						at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
						at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
						at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
						at org.terasoluna.gfw.web.logging.mdc.MDCClearFilter.doFilterInternal(MDCClearFilter.java:51)
						at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
						at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
						at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
						at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
						at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
						at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
						at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
						at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
						at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
						at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
						at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
						at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
						at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
						at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
						at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
						at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
						at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
						at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
						at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
						at java.base/java.lang.Thread.run(Thread.java:831)
					Caused by: java.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name 'command' available as request attribute
						at org.springframework.web.servlet.support.BindStatus.<init>(BindStatus.java:153)
						at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:177)
						at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getPropertyPath(AbstractDataBoundFormElementTag.java:198)
						at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getName(AbstractDataBoundFormElementTag.java:163)
						at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.autogenerateId(AbstractDataBoundFormElementTag.java:148)
						at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.resolveId(AbstractDataBoundFormElementTag.java:138)
						at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.writeDefaultAttributes(AbstractDataBoundFormElementTag.java:121)
						at org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.writeDefaultAttributes(AbstractHtmlElementTag.java:459)
						at org.springframework.web.servlet.tags.form.HiddenInputTag.writeTagContent(HiddenInputTag.java:112)
						at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:86)
						at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:83)
						at org.apache.jsp.WEB_002dINF.views.todo.list_jsp._jspx_meth_form_005fhidden_005f1(list_jsp.java:804)
						at org.apache.jsp.WEB_002dINF.views.todo.list_jsp._jspx_meth_form_005fform_005f2(list_jsp.java:757)
						at org.apache.jsp.WEB_002dINF.views.todo.list_jsp._jspx_meth_c_005fforEach_005f0(list_jsp.java:463)
						at org.apache.jsp.WEB_002dINF.views.todo.list_jsp._jspService(list_jsp.java:309)
						at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:71)
						at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
						at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:467)
						... 106 common frames omitted
					原因:
						<form:form>と書いてた。。<form:form ~ に修正してうまく動作した。